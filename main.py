# > Importer les modules n√©cessaires
import random
import os
from datetime import datetime, timedelta

# > D√©finir les fonctions
def clearConsole():
    """
    Nettoie la console

    Entr√©e: Aucune
    Sortie: Aucune
    """
    # Si le syst√®me d'exploitation est Windows, utiliser la commande 'cls' sinon utiliser 'clear'
    os.system('cls' if os.name == 'nt' else 'clear')

def randomWeather():
    """
    Retourne une m√©t√©o al√©atoire avec une chance de 2/3 d'avoir du soleil et 1/3 d'avoir de la pluie

    Entr√©e: Aucune
    Sortie: 'rainy' ou 'sunny' (string)
    """
    return random.choice(['rainy', 'sunny', 'sunny'])

def randomTemperature(weather):
    """
    Retourne une temp√©rature al√©atoire en fonction de la m√©t√©o

    Entr√©e: weather (string)
    Sortie: temperature (int)
    """
    if weather == 'rainy':
        return random.randint(10, 20)
    else:
        return random.randint(20, 30)

def randomExpense():
    """
    Retourne un prix al√©atoire d√©pens√© par les retrait√©s

    Entr√©e: Aucune
    Sortie: price (int)
    """
    return random.randint(20, 40)

def parseHistoryWeather(historyWeather):
    """
    Retourne l'historique de la m√©t√©o sous forme d'√©motic√¥nes

    Entr√©e: historyWeather (list)
    Sortie: historyWeatherText (string)
    """
    # D√©finir les variables
    historyWeatherText = ''

    # Parcourir la liste historyWeather
    for weather in historyWeather:
        # Ajouter un √©motic√¥ne en fonction de la m√©t√©o
        if weather == 'rainy':
            historyWeatherText += 'üåßÔ∏è '
        else:
            historyWeatherText += '‚òÄÔ∏è '

    # Retourner l'historique de la m√©t√©o
    return historyWeatherText

def parseHistoryTemperature(historyTemperature):
    """
    Retourne l'historique de la temp√©rature sous forme de graphique avec des fl√®ches

    Entr√©e: historyTemperature (list)
    Sortie: historyTemperatureText (string)
    """
    # D√©finir les variables
    historyTemperatureText = ''
    
    # Parcourir la liste historyTemperature
    for i in range(len(historyTemperature)):
        temperature = historyTemperature[i]
        historyTemperatureText += str(temperature) + '¬∞C'
        
        # V√©rifier s'il y a une temp√©rature suivante dans la liste
        if i < len(historyTemperature) - 1:
            next_temperature = historyTemperature[i + 1]
            
            # Ajouter ‚ÜóÔ∏è si la temp√©rature est inf√©rieure √† la temp√©rature suivante
            if temperature < next_temperature:
                historyTemperatureText += ' ‚ÜóÔ∏è '
            # Ajouter ‚ÜòÔ∏è si la temp√©rature est sup√©rieure √† la temp√©rature suivante
            elif temperature > next_temperature:
                historyTemperatureText += ' ‚ÜòÔ∏è '
            # Ajouter ‚ÜîÔ∏è si la temp√©rature est √©gale √† la temp√©rature suivante
            else:
                historyTemperatureText += ' ‚ÜîÔ∏è '

    # Retourner l'historique de la temp√©rature
    return historyTemperatureText

def parseHistoryExpense(historyExpense):
    """
    Retourne l'historique des d√©penses sous forme de graphique avec des fl√®ches

    Entr√©e: historyExpense (list)
    Sortie: historyExpenseText (string)
    """
    # D√©finir les variables
    historyExpenseText = ''
    
    # Parcourir la liste historyExpense
    for i in range(len(historyExpense)):
        expense = historyExpense[i]
        historyExpenseText += str(expense) + '‚Ç¨'
        
        # V√©rifier s'il y a une d√©pense suivante dans la liste
        if i < len(historyExpense) - 1:
            next_expense = historyExpense[i + 1]
            
            # Ajouter ‚ÜóÔ∏è si la d√©pense est inf√©rieure √† la d√©pense suivante
            if expense < next_expense:
                historyExpenseText += ' ‚ÜóÔ∏è '
            # Ajouter ‚ÜòÔ∏è si la d√©pense est sup√©rieure √† la d√©pense suivante
            elif expense > next_expense:
                historyExpenseText += ' ‚ÜòÔ∏è '
            # Ajouter ‚ÜîÔ∏è si la d√©pense est √©gale √† la d√©pense suivante
            else:
                historyExpenseText += ' ‚ÜîÔ∏è '

    # Retourner l'historique des d√©penses
    return historyExpenseText


# > Nettoyer la console
clearConsole()

# > D√©finir les conditions de d√©part
conditions = {
    "maxRainyDays": input('Nombre de jours de pluie cons√©cutifs maximum : '),
    "budget": input('Budget maximum : ')
}

# > V√©rifier que les conditions de d√©part sont correctes
if conditions['maxRainyDays'].isdigit() == False:
    # Si le nombre de jours de pluie maximum n'est pas un nombre, d√©finir la valeur par d√©faut √† 3
    conditions['maxRainyDays'] = 3
else:
    # Si le nombre de jours de pluie maximum est un nombre, le convertir en entier
    conditions['maxRainyDays'] = int(conditions['maxRainyDays'])

if conditions['budget'].isdigit() == False:
    # Si le budget maximum n'est pas un nombre, d√©finir la valeur par d√©faut √† 2000
    conditions['budget'] = 2000
else:
    # Si le budget maximum est un nombre, le convertir en entier
    conditions['budget'] = int(conditions['budget'])

if conditions['maxRainyDays'] < 0:
    # Si le nombre de jours de pluie maximum est inf√©rieur √† 0, afficher un message d'erreur et arr√™ter le programme
    print('\033[31m' + 'Le nombre de jours de pluie maximum doit √™tre sup√©rieur √† 0 !')
    exit()

if conditions['budget'] < 500:
    # Si le budget maximum est inf√©rieur √† 500, afficher un message d'erreur et arr√™ter le programme
    print('\033[31m' + '\nLe budget maximum doit √™tre sup√©rieur √† 500‚Ç¨ !')
    exit()

# > D√©finir les variables
rainyDays = 0
totalRainyDays = 0
totalSunnyDays = 0
Days = 0
departureDate = datetime(2023, 10, 1)
returnDate = departureDate

historyTemperature = []
historyWeather = []
historyDays = []
historyExpense = []

# > Afficher les conditions de d√©part
# Nettoyer la console
clearConsole()
# Afficher les conditions de d√©part
print(f'Conditions de d√©part :')
print('---------------------')
print(f'Nombre de jours de pluie cons√©cutifs maximum : {conditions["maxRainyDays"]}')
print(f'Budget maximum √† d√©penser : {conditions["budget"]}‚Ç¨')
print(f'Date de d√©part : {departureDate.strftime("%d/%m/%Y")}')
print('---------------------')

# > Attendre que l'utilisateur appuie sur la touche Entr√©e pour continuer
input('\nAppuyez sur Entr√©e pour continuer...')
print('\n---------------------')

# > Boucle principale
while rainyDays < conditions['maxRainyDays']:
    # D√©finir les variables
    weather = randomWeather()
    temperature = randomTemperature(weather)
    expense = randomExpense()
    Reason = ''

    # Mettre √† jour les variables globales
    conditions['budget'] -= expense
    Days += 1

    # Ajouter les valeurs dans les listes d'historique
    historyTemperature.append(temperature)
    historyWeather.append(weather)
    historyDays.append(Days)
    historyExpense.append(expense)

    # Afficher la date du jour
    print(f'\nDate du jour : {returnDate.strftime("%d/%m/%Y")}')

    # V√©rifier si le budget est d√©pass√©
    if expense > conditions['budget']:
        # Si le budget est d√©pass√© enregistrer la raison dans la variable Reason et arr√™ter la boucle
        Reason = 'ils n\'ont plus assez d\'argent pour continuer leurs vacances.'
        break
    else:
        # Si le budget n'est pas d√©pass√©, afficher l'argent d√©pens√© et l'argent restant
        print(f'Les retrait√©s ont d√©pens√© {expense}‚Ç¨ et il leur reste {conditions["budget"]}‚Ç¨')

    # V√©rifier la m√©t√©o du jour
    if weather == 'rainy':
        # Si il pleut, afficher un message et ajouter 1 √† rainyDays
        rainyDays += 1
        totalRainyDays += 1
        print(f'Il a plu et il faisait {temperature}¬∞C')
    else:
        # Si il ne pleut pas, afficher un message et ajouter 1 √† sunnyDays
        rainyDays = 0
        totalSunnyDays += 1
        print(f'Il a fait beau et il faisait {temperature}¬∞C')

    # Ajouter 1 jour √† la date de retour
    returnDate += timedelta(days=1)

# > Si le nombre de jours de pluie maximum est d√©pass√©, enregistrer la raison dans la variable Reason
if rainyDays >= conditions['maxRainyDays']:
    Reason = 'il a plu trop de jours de suite.'

# > Afficher la conclusion
print('\n---------------------')
print(f"\nLes deux retrait√©s sont rest√©s {Days} jours dans le sud de la France, du {departureDate.strftime('%d/%m/%Y')} au {returnDate.strftime('%d/%m/%Y')}.")
print(f"Ils ont √©t√© oblig√©s de rentrer car {Reason}")

# > Afficher les historiques
print('\n---------------------')
print(f'\nHistorique de la m√©t√©o : {parseHistoryWeather(historyWeather)}')
print(f'\nHistorique de la temp√©rature : {parseHistoryTemperature(historyTemperature)}')
print(f'\nHistorique des d√©penses : {parseHistoryExpense(historyExpense)}')

# > Afficher les statistiques
print('\n---------------------')
print(f'\nNombre de jours : {Days}')
print(f'Nombre de jours de pluie : {totalRainyDays}')
print(f'Nombre de jours de soleil : {totalSunnyDays}')
print('\n')
print(f'Temp√©rature minimale : {min(historyTemperature)}¬∞C')
print(f'Temp√©rature maximale : {max(historyTemperature)}¬∞C')
print(f'Temp√©rature moyenne : {round(sum(historyTemperature)/len(historyTemperature), 2)}¬∞C')
print('\n')
print(f"Jour le plus chaud : {(timedelta(days=historyDays[historyTemperature.index(max(historyTemperature))]) + departureDate).strftime('%d/%m/%Y')}")
print(f"Jour le plus froid : {(timedelta(days=historyDays[historyTemperature.index(min(historyTemperature))]) + departureDate).strftime('%d/%m/%Y')}")
print('\n')
print(f'D√©pense minimale : {min(historyExpense)}‚Ç¨')
print(f'D√©pense maximale : {max(historyExpense)}‚Ç¨')
print(f'D√©pense moyenne : {round(sum(historyExpense)/len(historyExpense), 2)}‚Ç¨')